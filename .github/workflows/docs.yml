name: docs

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  workflow_dispatch:

concurrency: docs-${{ github.ref }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Just
        uses: extractions/setup-just@v2

      - name: Install documentation tooling
        run: just install-docs

      - name: Build docs
        run: just docs-build

      - name: Generate LLM manifests
        run: just docs-index

      - name: Guardrails
        run: |
          ! grep -R --include='*.md' -E '(AKIA[0-9A-Z]{16}|SECRET_KEY|token=|password=|x-api-key)' docs || (echo "Secret-like pattern found" && exit 1)
          ! git ls-files docs | grep -E '\.(py|ipynb|html)$' && echo "OK" || (echo "Forbidden file type present" && exit 1)

      - name: Link check (optional)
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        run: |
          cargo install --locked lychee
          lychee --verbose --no-progress docs || true

      - name: Package gh-pages assets
        run: |
          out_dir=$(mktemp -d)
          rsync -a book/ "$out_dir"/
          mkdir -p "$out_dir"/llm
          rsync -a docs/llm/ "$out_dir"/llm/
          touch "$out_dir"/.nojekyll
          echo "OUT_DIR=$out_dir" >> $GITHUB_ENV

      - name: Publish to gh-pages
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # Configure git for the deployment
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          # Fetch and setup gh-pages branch
          git fetch origin gh-pages || true
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
            git reset --hard origin/gh-pages
          else
            git checkout -b gh-pages
          fi
          
          # Clear existing content and deploy new files
          git ls-files -z | xargs -0 --no-run-if-empty git rm -f
          git clean -fdx
          cp -r "${OUT_DIR}/." .
          
          # Add deployment metadata
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > .deployment-info
          echo "Source commit: ${GITHUB_SHA}" >> .deployment-info
          echo "Workflow run: ${GITHUB_RUN_ID}" >> .deployment-info
          echo "Trigger: ${GITHUB_EVENT_NAME}" >> .deployment-info
          
          # Commit and push all changes to gh-pages
          git add .
          if git diff --cached --quiet; then
            echo "No changes to deploy"
          else
            git commit -m "docs: deploy documentation" \
              -m "Source commit: ${GITHUB_SHA}" \
              -m "Workflow run: ${GITHUB_RUN_ID}" \
              -m "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
              -m "Trigger: ${GITHUB_EVENT_NAME}" \
              -m "" \
              -m "This commit contains:" \
              -m "- Static documentation site (from mdbook build)" \
              -m "- LLM integration manifests (from docs-index)" \
              -m "- Deployment metadata" || echo "No changes to commit"
            
            git push origin gh-pages
            echo "âœ… Documentation deployed to gh-pages successfully"
          fi
          
          # Cleanup
          rm -rf "${OUT_DIR}"
