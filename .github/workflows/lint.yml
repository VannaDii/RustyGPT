name: Lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  checks: write
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  LANGUAGE: en_US
  CARGO_HOME: ${{ github.workspace }}/.cargo

jobs:
  clippy:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Just
        uses: extractions/setup-just@v2

      - name: Add Cargo bin to PATH
        run: echo "${{ github.workspace }}/.cargo/bin" >> $GITHUB_PATH

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.CARGO_HOME }}/bin
            ${{ env.CARGO_HOME }}/git
            ${{ env.CARGO_HOME }}/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Create .env file
        run: cp .env.template .env

      - name: Install required tools
        run: just install-ci

      - name: Check formatting and linting
        run: just check

  audit:
    name: Security audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add Cargo bin to PATH
        run: echo "${{ github.workspace }}/.cargo/bin" >> $GITHUB_PATH

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.CARGO_HOME }}/bin
            ${{ env.CARGO_HOME }}/git
            ${{ env.CARGO_HOME }}/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Generate lockfile
        run: cargo generate-lockfile

      - name: Get security ignore list
        id: secignore
        run: |
          if [ -f .secignore ]; then
            ignore_values=$(grep -v '^\s*#' .secignore | tr '\n' ',' | sed 's/,$//')
            echo "ignore=$ignore_values" >> $GITHUB_OUTPUT
          else
            echo "ignore=" >> $GITHUB_OUTPUT
          fi

      - name: Audit check
        uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore: ${{ steps.secignore.outputs.ignore }}
