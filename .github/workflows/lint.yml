name: Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  checks: write
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  LANGUAGE: en_US
  CARGO_HOME: ${{ github.workspace }}/.cargo

jobs:
  clippy:
    name: Lint
    container:
      image: rust:latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Add Cargo bin to PATH
        run: echo "${{ github.workspace }}/.cargo/bin" >> $GITHUB_PATH

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/cargo
            /usr/local/rustup
            ${{ env.CARGO_HOME }}/bin
            ${{ env.CARGO_HOME }}/git
            ${{ env.CARGO_HOME }}/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Create .env file
        run: cp .env.template .env

      - name: Install Cargo Tools
        run: |
          if rustup target list --installed | grep -F "wasm32-unknown-unknown" >/dev/null; then
            echo "Target wasm32-unknown-unknown already installed"
          else
            rustup target add wasm32-unknown-unknown
          fi
          if ! cargo clippy --version >/dev/null 2>&1; then
            rustup component add clippy
          else
            echo "clippy already installed"
          fi

      - name: Clippy check
        run: cargo clippy --all-features -- -D warnings

  rustfmt:
    name: Format
    container:
      image: rust:latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Add Cargo bin to PATH
        run: echo "${{ github.workspace }}/.cargo/bin" >> $GITHUB_PATH

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/cargo
            /usr/local/rustup
            ${{ env.CARGO_HOME }}/bin
            ${{ env.CARGO_HOME }}/git
            ${{ env.CARGO_HOME }}/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Create .env file
        run: cp .env.template .env

      - name: Install Cargo Tools
        run: |
          if rustup target list --installed | grep -F "wasm32-unknown-unknown" >/dev/null; then
            echo "Target wasm32-unknown-unknown already installed"
          else
            rustup target add wasm32-unknown-unknown
          fi
          if ! cargo fmt --version >/dev/null 2>&1; then
            rustup component add rustfmt
          else
            echo "rustfmt already installed"
          fi

      - name: Check formatting
        run: cargo fmt --all -- --check

  audit:
    name: Security audit
    container:
      image: rust:latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Add Cargo bin to PATH
        run: echo "${{ github.workspace }}/.cargo/bin" >> $GITHUB_PATH

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/cargo
            /usr/local/rustup
            ${{ env.CARGO_HOME }}/bin
            ${{ env.CARGO_HOME }}/git
            ${{ env.CARGO_HOME }}/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Generate lockfile
        run: cargo generate-lockfile

      - name: Get security ignore list
        id: secignore
        run: |
          ignore_values=$(grep -v '^\s*#' .secignore | tr '\n' ',' | sed 's/,$//')
          echo "ignore=$ignore_values" >> $GITHUB_OUTPUT

      - name: Audit check
        uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore: ${{ steps.secignore.outputs.ignore }}
