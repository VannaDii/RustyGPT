name: Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  checks: write
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  LANGUAGE: en_US

jobs:
  clippy:
    name: Lint
    container:
      image: rust:latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cp .env.template .env

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install Cargo Tools
        run: |
          rustup target add wasm32-unknown-unknown
          rustup component add clippy
          cargo install --locked --jobs "$(nproc)" sqlx-cli

      - name: Clippy check
        run: cargo clippy --all-features -- -D warnings

  rustfmt:
    name: Format
    container:
      image: rust:latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registries and git checkouts
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/cargo/git
            /usr/local/cargo/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo installed binaries
        uses: actions/cache@v3
        with:
          path: /usr/local/cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('.github/workflows/*.yml') }}

      - name: Install Cargo Tools
        run: |
          rustup target add wasm32-unknown-unknown
          rustup component add rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  audit:
    name: Security audit
    container:
      image: rust:latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registries and git checkouts
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CARGO_HOME != '' && env.CARGO_HOME || github.workspace }}/.cargo/registry
            ${{ env.CARGO_HOME != '' && env.CARGO_HOME || github.workspace }}/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo installed binaries
        uses: actions/cache@v3
        with:
          path: ${{ env.CARGO_HOME != '' && env.CARGO_HOME || github.workspace }}/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('.github/workflows/*.yml') }}

      - name: Generate lockfile
        run: cargo generate-lockfile

      - name: Get security ignore list
        id: secignore
        run: |
          ignore_values=$(grep -v '^\s*#' .secignore | tr '\n' ',' | sed 's/,$//')
          echo "ignore=$ignore_values" >> $GITHUB_OUTPUT

      - name: Audit check
        uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore: ${{ steps.secignore.outputs.ignore }}
