{
  "title": "RustyGPT Copilot Guidelines",
  "create_time": 1744498384.638341,
  "update_time": 1744498638.394764,
  "mapping": {
    "8b51958f-b548-4d30-9a7f-1d73c6066c31": {
      "id": "8b51958f-b548-4d30-9a7f-1d73c6066c31",
      "message": null,
      "parent": null,
      "children": [
        "4537abe6-1258-428b-a579-27f7b4c356d6"
      ]
    },
    "4537abe6-1258-428b-a579-27f7b4c356d6": {
      "id": "4537abe6-1258-428b-a579-27f7b4c356d6",
      "message": {
        "id": "4537abe6-1258-428b-a579-27f7b4c356d6",
        "author": {
          "role": "system",
          "name": null,
          "metadata": {}
        },
        "create_time": null,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            ""
          ]
        },
        "status": "finished_successfully",
        "end_turn": true,
        "weight": 0.0,
        "metadata": {
          "is_visually_hidden_from_conversation": true
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "8b51958f-b548-4d30-9a7f-1d73c6066c31",
      "children": [
        "7eda2d6c-1521-44b1-968c-58faed71dc38"
      ]
    },
    "7eda2d6c-1521-44b1-968c-58faed71dc38": {
      "id": "7eda2d6c-1521-44b1-968c-58faed71dc38",
      "message": {
        "id": "7eda2d6c-1521-44b1-968c-58faed71dc38",
        "author": {
          "role": "system",
          "name": null,
          "metadata": {}
        },
        "create_time": 1744498384.6379335,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            ""
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "attachments": [],
          "is_visually_hidden_from_conversation": true
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "4537abe6-1258-428b-a579-27f7b4c356d6",
      "children": [
        "28dbd221-79f9-408a-a71d-19fc8a859fe8"
      ]
    },
    "28dbd221-79f9-408a-a71d-19fc8a859fe8": {
      "id": "28dbd221-79f9-408a-a71d-19fc8a859fe8",
      "message": {
        "id": "28dbd221-79f9-408a-a71d-19fc8a859fe8",
        "author": {
          "role": "user",
          "name": null,
          "metadata": {}
        },
        "create_time": 1744498383.851399,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "Using all the knowledge in this project....\n\nOkay, we've created the RustyGPT project and worked on it with Github Copilot using the `GPT-4o` and `Claude Sonnet 3.7` models. We can author an instructions file to help guide Copilot in code generation and architecture. I need you to produce a comprehensive instruction markdown file that instructs GitHub Copilot to follow all the Rust best practices for code design, memory optimization, performance, and docstring comments. Since we can't rely on GitHub Copilot to know these best practices, we need to spell them out in the markdown format in a clear and concise way that the models will understand and be capable of adhering to. What other aspects of Rust programming are critical and must be included? Let's be super specific about comment styles and ensure that all types that can be referenced in a comment are referenced correctly to produce intellisense links to the referenced types.\n\nThese are the current workspace members:\n```toml\n[workspace]\nresolver = \"2\"\nmembers = [\n    \"tubarr-common\",\n    \"tubarr-api\",\n    \"tubarr-downloader\",\n    \"tubarr-indexer\",\n    \"tubarr-tagger\",\n    \"tubarr-cli\"\n]\n```\n\nDon't include that in the instructions, but instead reference the workspace Cargo.toml.\n\nLet's also ensure 100% unit testing code coverage, testing the happy path and ALL potential error paths.\n\nWe should instruct it to update the documentation with every change it makes.\n\nEnsure the instructions include the commit style and PR description style. Make sure it follows the most popular open-source conventions and semver guidelines\n\nWe should also provide rules about crate version management and maintaining synchronized versions across executable crates. Make sure we adhere to semver rules\n\nFor code coverage verification, we want to use `cargo llvm-cov --workspace --html --output-dir .coverage && open .coverage/index.html`\n\nFor all UI/UX work, we'll be using TailwindCss (already in our build pipeline) and DaisyUI conponents. Make sure you provide links to the github respositories for these projects and also provide references to the most modern github repos that showcase DaisyUI 5 components.\n\nBelow is an instruction file from a different project to use as an example. Because RustyGPT is such an important project to me, it's extremely important that we adhere to the utmost quality standards, and that includes code quality and test coverage.\n\n```md\n# Tubarr Copilot Instructions\n\nThis document contains comprehensive guidelines for GitHub Copilot on how to generate or refactor Rust code for the Tubarr project workspace. All generated code must adhere to these instructions to ensure high-quality, idiomatic, maintainable, and performant Rust code with complete documentation, thorough testing, and consistent commit, pull request, and version management practices.\n\n> **Workspace Members**\n> For details about the workspace configuration and members, please refer to the workspace [Cargo.toml](../Cargo.toml) file.\n\n---\n\n## 1. Rust Code Design & Best Practices\n\n- **Modularity and Separation of Concerns:**\n  - Organize code into separate modules and crates (e.g., `tubarr-indexer`, `tubarr-downloader`, `tubarr-tagger`, `tubarr-api`, `tubarr-cli`, and `tubarr-common`).\n  - Each module or function should have a single responsibility.\n\n- **Idiomatic Rust Usage:**\n  - Use Rust's ownership and borrowing principles to minimize unnecessary memory allocations or cloning.\n  - Leverage iterators, closures, and pattern matching to write clear, concise code.\n  - When using concurrency or async code, prefer safe patterns with Tokio or async-std.\n\n- **Error Handling:**\n  - Functions that may fail must return a [`Result<T, E>`](std::result::Result) and use proper error handling.\n  - Use crates such as [`anyhow`](https://docs.rs/anyhow/latest/anyhow/) or [`thiserror`](https://docs.rs/thiserror/latest/thiserror/) for robust error management with contextual information.\n  - Propagate errors using the `?` operator; avoid panicking in production code.\n\n---\n\n## 2. Comment Styles and Documentation\n\n### Doc Comments (using `///`)\n\n- **Purpose:**\n  Document all public items, including functions, structs, enums, traits, and modules, with triple-slash comments.\n\n- **Type References with Intellisense Links:**\n  When referencing types, wrap them in backticks and square brackets so that IDEs generate clickable links. **Example:**\n  ```rust\n  /// Fetches video data from a given YouTube URL.\n  ///\n  /// # Arguments\n  ///\n  /// * `video_url` - A [`String`](std::string::String) representing the URL of the video.\n  ///\n  /// # Returns\n  ///\n  /// A [`Video`](tubarr-common::models::video::Video) instance with the scraped data.\n  ///\n  /// # Errors\n  ///\n  /// Returns a [`Result`](std::result::Result::Err) if the HTTP request fails or parsing errors occur.\n  pub async fn fetch_video_data(video_url: String) -> Result<Video, anyhow::Error> { ... }\n\nModule-Level Documentation (using //!)\n\t•\tAt the top of each module file, include a brief description of the module’s purpose.\nExample:\n\n//! This module contains functions for scraping YouTube pages for video metadata.\n//! It parses SEO meta tags and maps them to a [`Video`](tubarr-common::models::video::Video) model.\n\n\n\nInline Comments\n\t•\tUse // for clarifying non-obvious logic or steps in complex algorithms.\n\t•\tUpdate inline comments alongside code changes to ensure they remain accurate and helpful.\n\n⸻\n\n3. Memory Optimization & Performance\n\nOwnership & Borrowing\n\t•\tPass data by reference (e.g., &T) where possible; clone only when necessary.\n\t•\tUse slices (&[T]) for read-only collections to avoid unnecessary allocations.\n\nEfficient Data Structures\n\t•\tChoose the appropriate data structure for each task: use Vec<T> for dynamic arrays, HashMap<K, V> for key-value mappings, and consider DashMap for concurrent access.\n\t•\tZero-Cost Abstractions: Make use of Rust’s iterators and closures, which compile away into efficient machine code with no runtime overhead.\n\nConcurrency and Asynchrony\n\t•\tWrite asynchronous code using Tokio or async-std for non-blocking I/O tasks.\n\t•\tUtilize synchronization primitives such as Arc and Mutex judiciously, ensuring proper thread-safety.\n\n⸻\n\n4. Testing, Code Coverage, and Continuous Integration\n\t•\tUnit Testing:\n\t•\tAll functions must have unit tests covering both the happy path and every possible error path.\n\t•\tA function MUST never be considered complete until it is fully tested.\n\t•\tUse #[cfg(test)] modules within each crate for isolating tests.\n\t•\tAim for 100% code coverage.\n\t•\tIntegration Testing:\n\t•\tWrite integration tests for end-to-end workflows in the /tests directory.\n\t•\tEnsure tests simulate real-world usage and edge cases across multiple crates (e.g., indexer → API interactions).\n\t•\tLinting & Formatting:\n\t•\tRun cargo fmt --all for consistent formatting.\n\t•\tUse cargo clippy --all-features -- -D warnings to catch common mistakes and enforce idiomatic practices.\n\t•\tNo compiler warnings should be present in production builds.\n\t•\tCode Coverage Verification:\n\t•\tVerify code coverage using cargo llvm-cov with the following command:\n\ncargo llvm-cov --workspace --html --output-dir .coverage && open .coverage/index.html\n\n\n\t•\tEnsure that code coverage meets or exceeds 100% for unit tests.\n\n⸻\n\n5. Documentation Updates & Commit Standards\n\nDocumentation Maintenance\n\t•\tUpdate inline doc comments, module-level docs, and external README files with every code change.\n\t•\tEnsure that all type references in documentation include accurate Intellisense links (e.g., Result<T, E>).\n\nCommit Style Guidelines\n\t•\tConventional Commits:\nUse the Conventional Commits standard for commit messages:\n\t•\tfeat: for new features.\n\t•\tfix: for bug fixes.\n\t•\tdocs: for documentation changes.\n\t•\tstyle: for formatting changes or non-functional updates.\n\t•\trefactor: for code refactoring without adding features or fixing bugs.\n\t•\ttest: for adding or modifying tests.\n\t•\tchore: for maintenance tasks or changes that do not affect source code.\n\t•\tCommit Message Format:\n\t1.\tA short, imperative summary line (max 72 characters).\n\t2.\tA blank line.\n\t3.\tA detailed description if necessary (explain what and why).\n\t4.\tReferences to issues or PRs if applicable (e.g., Refs: #123).\nExample:\n\nfeat(tubarr-downloader): add async video download using yt-dlp\n\nImplemented an async function in the tubarr-downloader crate that wraps yt-dlp\nto download YouTube videos. This feature enhances download performance and improves\nerror handling.\n\nRefs: #45, #67\n\n\n\nPull Request (PR) Description Style Guidelines\n\t•\tTitle:\nUse a concise title that clearly states the change (e.g., “feat(tubarr-api): Implement Torznab XML feed generation”).\n\t•\tStructure of the PR Description:\n\t1.\tSummary: Provide a short overview of the changes.\n\t2.\tMotivation & Context: Explain why the changes are needed and how they fit into the overall architecture of Tubarr.\n\t3.\tChanges: List the main changes made:\n\t•\tNew features (e.g., async video downloading, tagging functionality).\n\t•\tBug fixes or refactorings.\n\t•\tDocumentation and test updates.\n\t4.\tTesting: Describe how the changes were tested, including instructions for running tests.\n\t5.\tRelated Issues: Reference related issues or PRs (e.g., “Closes #123”).\n\t6.\tAdditional Notes: Include any extra context, limitations, or future work notes.\nExample PR Description:\n\n# feat(tubarr-indexer): add concurrent scraping for YouTube videos\n\n## Summary\nThis PR introduces asynchronous scraping in the tubarr-indexer crate, enabling concurrent fetching of video metadata from YouTube.\n\n## Motivation & Context\nEnhances performance by reducing the latency of HTTP requests via Tokio's concurrency mechanisms, and improves error management using `anyhow`.\n\n## Changes\n- Added new functions in `scraper.rs` for concurrent HTTP requests.\n- Refactored `indexer.rs` to utilize concurrent processing.\n- Updated error handling and logging throughout the module.\n- Added comprehensive unit tests and integration tests to ensure 100% test coverage.\n- Documentation updates in code comments and README.\n\n## Testing\n- Run unit tests: `cargo test --workspace`\n- Verified integration via the `/search` endpoint in the tubarr-api crate.\n\n## Related Issues\nCloses #45, #78\n\n## Additional Notes\nFuture work may include enhanced caching strategies and further metadata improvements.\n\n\n\n⸻\n\n6. Crate Version Management & Semantic Versioning\n\t•\tSynchronized Versioning:\n\t•\tAll executable crates (e.g., tubarr-api, tubarr-cli) should share synchronized version numbers when included in a single release.\n\t•\tUse a workspace-wide version in the root Cargo.toml so that individual crate versions are automatically aligned.\n\t•\tSemantic Versioning (SemVer):\n\t•\tAdhere to SemVer rules:\n\t•\tMajor version: Increment for incompatible API changes.\n\t•\tMinor version: Increment for adding functionality in a backward-compatible manner.\n\t•\tPatch version: Increment for backward-compatible bug fixes.\n\t•\tDocument every version change in commit messages and include version bump notes in PR descriptions.\n\t•\tDependency Synchronization:\n\t•\tMaintain consistent versions for shared dependencies across crates to prevent conflicts and ensure compatibility.\n\t•\tRegularly run cargo update and verify that the workspace’s Cargo.toml reflects updated versions used by all members.\n\n⸻\n\n7. Guidelines for GitHub Copilot\n\t•\tAdherence to Best Practices:\nAlways generate code that follows the guidelines described here:\n\t•\tEnsure all code adheres to idiomatic Rust practices.\n\t•\tUpdate documentation and tests with every code modification.\n\t•\tUse proper error handling and memory optimization techniques.\n\t•\tMaintain consistent commit messages using Conventional Commits.\n\t•\tFollow the structured PR description format outlined above.\n\t•\tEnsure synchronized version updates across executable crates in accordance with SemVer.\n\t•\tTesting Focus:\n\t•\tInclude comprehensive tests that cover both success and error scenarios.\n\t•\tWrite integration tests that simulate complete workflows across crates.\n\t•\tGenerate code that maintains 100% unit test coverage where feasible.\n\t•\tDocumentation and Commenting:\n\t•\tAll public functions and types must have corresponding doc comments with detailed explanations and usage examples.\n\t•\tUpdate all documentation in response to changes in code behavior or functionality.\n\n⸻\n\n8. Critical Rust Concepts to Always Include\n\t1.\tSafety and Correctness:\n\t•\tEnforce the use of Result<T, E> and Option<T> for operations that can fail.\n\t•\tUse unsafe only when absolutely necessary and document its usage comprehensively.\n\t2.\tPerformance & Memory Optimization:\n\t•\tUse references and borrowing to avoid unnecessary allocations.\n\t•\tChoose efficient data structures and algorithms, and document performance considerations.\n\t3.\tConcurrency & Asynchronous Programming:\n\t•\tImplement async functions using Tokio.\n\t•\tUse synchronization primitives (Arc, Mutex) responsibly and document their necessity.\n\t4.\tComplete Testing:\n\t•\tProvide tests for both happy paths and all error paths.\n\t•\tInclude comprehensive integration tests for end-to-end functionality across multiple crates.\n\t5.\tDocumentation:\n\t•\tMaintain thorough, up-to-date documentation with clickable references to all types and functions.\n\t•\tEnsure that every code change is accompanied by corresponding doc updates.\n\n⸻\n\nEnd of Tubarr Copilot Instructions\n```"
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "request_id": "92f64c3579656824-SEA",
          "message_source": null,
          "timestamp_": "absolute",
          "message_type": null
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "7eda2d6c-1521-44b1-968c-58faed71dc38",
      "children": [
        "b1ef9d07-313a-4b62-937f-b8fb4185bd51"
      ]
    },
    "b1ef9d07-313a-4b62-937f-b8fb4185bd51": {
      "id": "b1ef9d07-313a-4b62-937f-b8fb4185bd51",
      "message": {
        "id": "b1ef9d07-313a-4b62-937f-b8fb4185bd51",
        "author": {
          "role": "assistant",
          "name": null,
          "metadata": {}
        },
        "create_time": 1744498396.74186,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            ""
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "message_type": null,
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "28dbd221-79f9-408a-a71d-19fc8a859fe8",
          "request_id": "92f64c3579656824-SEA",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "28dbd221-79f9-408a-a71d-19fc8a859fe8",
      "children": [
        "37df4690-5484-4a36-bbb0-171ef2f38c75"
      ]
    },
    "37df4690-5484-4a36-bbb0-171ef2f38c75": {
      "id": "37df4690-5484-4a36-bbb0-171ef2f38c75",
      "message": {
        "id": "37df4690-5484-4a36-bbb0-171ef2f38c75",
        "author": {
          "role": "assistant",
          "name": null,
          "metadata": {}
        },
        "create_time": 1744498384.88574,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "{\n  \"name\": \"rustygpt-copilot-instructions\",\n  \"type\": \"document\",\n  \"content\": \"# RustyGPT Copilot Instructions\\n\\nThis document defines strict, high-quality guidelines for GitHub Copilot to follow when generating or editing code for the RustyGPT project. All contributions must be idiomatic, efficient, safe, maintainable, and fully documented. These standards ensure correctness, performance, and long-term project sustainability.\\n\\n> **Workspace Members**: See the [workspace Cargo.toml](../Cargo.toml) for crate membership and layout.\\n\\n---\\n\\n## 1. Rust Code Design & Best Practices\\n\\n### Modularity & Separation of Concerns\\n- Organize code into cleanly separated crates and modules.\\n- Each function and module must have a single responsibility.\\n- Favor composition over inheritance; encapsulate logic.\\n\\n### Idiomatic Rust\\n- Use ownership and borrowing effectively; avoid unnecessary `clone()`.\\n- Favor `match`, iterators, pattern matching, and expressive enums.\\n- Use `Option` and `Result` idiomatically.\\n- Prefer `?` for error propagation.\\n\\n### Error Handling\\n- Return [`Result<T, E>`](https://doc.rust-lang.org/std/result/) from fallible functions.\\n- Use [`thiserror`](https://docs.rs/thiserror) for defining error enums.\\n- Use [`anyhow`](https://docs.rs/anyhow) for application-level error contexts.\\n- Never use `.unwrap()` or `.expect()` outside of tests or explicitly safe contexts.\\n\\n---\\n\\n## 2. Commenting & Documentation Standards\\n\\n### Docstrings (`///`)\\n- Every public item (fn, struct, enum, trait, mod) must have a docstring.\\n- Format references like: [`String`](https://doc.rust-lang.org/std/string/struct.String.html) or [`MyType`](crate::path::to::MyType).\\n- Use `# Arguments`, `# Returns`, `# Errors`, and `# Examples` sections as needed.\\n\\n**Example:**\\n```rust\\n/// Attempts to log in a user by validating their credentials.\\n///\\n/// # Arguments\\n/// * `username` - A [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\\n/// * `password` - A raw user password\\n///\\n/// # Returns\\n/// A valid [`Session`](crate::auth::Session) if credentials are valid.\\n///\\n/// # Errors\\n/// Returns an error if credentials are invalid or the DB query fails.\\n```\\n\\n### Module Docs (`//!`)\\n- All modules must begin with a `//!` comment explaining their purpose and main structs/functions.\\n\\n### Inline Comments (`//`)\\n- Only for clarifying logic, not restating what the code does.\\n- Keep current with code changes.\\n\\n---\\n\\n## 3. Memory Efficiency & Performance\\n\\n### Borrowing & Allocation\\n- Pass `&T` or `&mut T` unless ownership is required.\\n- Accept slices (`&[T]`) instead of `Vec<T>` when possible.\\n- Avoid `clone()` unless necessary; use `Cow` where applicable.\\n\\n### Data Structures\\n- Use `Vec`, `HashMap`, `HashSet` from `std::collections` appropriately.\\n- For concurrency, prefer `DashMap` over `Mutex<HashMap>`.\\n\\n### Concurrency & Async\\n- Use `tokio` for async work.\\n- Share data across threads with `Arc`.\\n- Lock only what's necessary with `Mutex`, `RwLock`.\\n- Avoid blocking code in async contexts.\\n\\n---\\n\\n## 4. Testing & Coverage\\n\\n### Unit Testing\\n- Every function must be tested: happy path, all error paths.\\n- Use `#[cfg(test)]` modules co-located with implementation.\\n\\n### Integration Testing\\n- Place in `/tests`; test end-to-end flows across crates.\\n\\n### Code Coverage\\n- Use `cargo llvm-cov` to measure:\\n```sh\\ncargo llvm-cov --workspace --html --output-dir .coverage && open .coverage/index.html\\n```\\n- Maintain **100% coverage** of all logic.\\n\\n### Linting\\n- Run formatting and Clippy checks in CI:\\n```sh\\ncargo fmt --all\\ncargo clippy --all-features -- -D warnings\\n```\\n- No warnings allowed in production.\\n\\n---\\n\\n## 5. Documentation & Commit Style\\n\\n### Documentation Updates\\n- Update all comments, module docs, and examples with every code change.\\n- Never leave outdated or misleading documentation.\\n\\n### Commit Messages (Conventional Commits)\\nUse the format:\\n```sh\\n<type>(<scope>): <short summary>\\n\\n<detailed body if needed>\\n\\nRefs: #issue\\n```\\n- `feat`: new feature\\n- `fix`: bug fix\\n- `docs`: documentation only\\n- `refactor`: code change not fixing a bug or adding a feature\\n- `test`: test changes only\\n- `chore`: infra or dependency update\\n\\n**Example:**\\n```txt\\nfeat(api): add session token refresh logic\\n\\nAdds a new endpoint `/auth/refresh` that renews JWTs.\\nIncludes full test coverage and updates OpenAPI docs.\\n\\nRefs: #42\\n```\\n\\n### Pull Request Descriptions\\nUse this template:\\n```\\n# <type(scope)>: <title>\\n\\n## Summary\\n- What this PR does.\\n\\n## Motivation & Context\\n- Why the change is needed.\\n\\n## Changes\\n- Bullet list of changes made\\n\\n## Testing\\n- Describe testing process and coverage level\\n\\n## Related Issues\\n- Closes # or Refs #\\n\\n## Additional Notes\\n- Anything else reviewers should know\\n```\\n\\n---\\n\\n## 6. Version Management\\n\\n### Executable Crates\\n- Maintain synchronized versions across all executable crates.\\n- Use a shared `workspace.version` in the root Cargo.toml if possible.\\n\\n### SemVer Compliance\\n- MAJOR: breaking changes\\n- MINOR: new, backward-compatible functionality\\n- PATCH: backward-compatible bug fixes\\n\\n### Dependency Sync\\n- Align shared dependency versions across crates.\\n- Regularly run `cargo update` and verify compatibility.\\n\\n---\\n\\n## 7. UI/UX Standards (Yew + TailwindCSS + DaisyUI)\\n\\n### CSS & Components\\n- Use [TailwindCSS](https://github.com/tailwindlabs/tailwindcss) for styling.\\n- Use [DaisyUI](https://github.com/saadeghi/daisyui) for UI components.\\n- Reference latest [DaisyUI v5 examples](https://github.com/saadeghi/daisyui/tree/v5/docs/src/routes/components).\\n- Keep component structure clean and responsive.\\n- Prefer functional, accessible HTML and ARIA patterns.\\n\\n---\\n\\n## 8. Copilot Enforcement Checklist\\n\\nCopilot **must always**:\\n- Follow all idiomatic Rust practices.\\n- Avoid unnecessary clones or allocations.\\n- Maintain 100% unit test coverage.\\n- Write happy-path and error-path tests.\\n- Add or update all related doc comments.\\n- Format all commit messages per Conventional Commits.\\n- Write detailed PR descriptions using the defined template.\\n- Keep executable crate versions in sync using SemVer.\\n- Format and lint all code.\\n- Use Tailwind + DaisyUI for any frontend code.\\n\\n---\\n\\n## 9. Critical Rust Concepts to Reinforce\\n\\n- Safety: use `unsafe` only with full justification and comments.\\n- Memory: prefer `&T`, avoid clones, use `Cow`, `Option`, `Result` idiomatically.\\n- Testing: fully test every logic path.\\n- Docs: every public item documented, all types reference-linked.\\n- Performance: iterate efficiently, async properly, structure data intentionally.\\n\\n---\\n\\n_End of RustyGPT Copilot Instructions._\"\n}"
          ]
        },
        "status": "finished_successfully",
        "end_turn": false,
        "weight": 1.0,
        "metadata": {
          "finish_details": {
            "type": "stop",
            "stop_tokens": [
              200007
            ]
          },
          "is_complete": true,
          "citations": [],
          "content_references": [],
          "gizmo_id": "g-p-67cc7f57b614819197a4fa9e793b0e47",
          "message_type": null,
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "b1ef9d07-313a-4b62-937f-b8fb4185bd51",
          "request_id": "92f64c3579656824-SEA",
          "timestamp_": "absolute"
        },
        "recipient": "canmore.create_textdoc",
        "channel": null
      },
      "parent": "b1ef9d07-313a-4b62-937f-b8fb4185bd51",
      "children": [
        "7f3633f0-1bf7-43ca-8321-446baefc3ad3"
      ]
    },
    "7f3633f0-1bf7-43ca-8321-446baefc3ad3": {
      "id": "7f3633f0-1bf7-43ca-8321-446baefc3ad3",
      "message": {
        "id": "7f3633f0-1bf7-43ca-8321-446baefc3ad3",
        "author": {
          "role": "tool",
          "name": "canmore.create_textdoc",
          "metadata": {}
        },
        "create_time": 1744498418.577159,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "Successfully created text document 'Rustygpt-copilot-instructions' which will be referenced in all future messages with the unique identifier textdoc_id: '67faeeee6fe881919cfa1218df30f6a6'"
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 0.0,
        "metadata": {
          "canvas": {
            "textdoc_id": "67faeeee6fe881919cfa1218df30f6a6",
            "textdoc_type": "document",
            "version": 1,
            "title": "Rustygpt-copilot-instructions",
            "create_source": "model"
          },
          "command": "create_textdoc",
          "message_type": null,
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "37df4690-5484-4a36-bbb0-171ef2f38c75",
          "request_id": "92f64c3579656824-SEA",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "37df4690-5484-4a36-bbb0-171ef2f38c75",
      "children": [
        "ad2bc7f8-70b0-4713-b7dd-84d085216778"
      ]
    },
    "ad2bc7f8-70b0-4713-b7dd-84d085216778": {
      "id": "ad2bc7f8-70b0-4713-b7dd-84d085216778",
      "message": {
        "id": "ad2bc7f8-70b0-4713-b7dd-84d085216778",
        "author": {
          "role": "assistant",
          "name": null,
          "metadata": {}
        },
        "create_time": 1744498414.589946,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "✅ **RustyGPT Copilot Instructions** have been authored and saved as a markdown doc. It now includes:\n\n- Idiomatic Rust rules\n- Memory and performance optimization practices\n- Full docstring syntax for IntelliSense linking\n- 100% test coverage mandate (happy + error paths)\n- Version management via SemVer and workspace sync\n- Commit/PR style conventions\n- Frontend guidance (TailwindCSS + DaisyUI v5)\n- Enforced Copilot behavior across all aspects\n\nLet me know if you'd like a CI job that checks all these criteria automatically (coverage, formatting, linting, docs, test pass, etc)."
          ]
        },
        "status": "finished_successfully",
        "end_turn": true,
        "weight": 1.0,
        "metadata": {
          "finish_details": {
            "type": "stop",
            "stop_tokens": [
              200002
            ]
          },
          "is_complete": true,
          "citations": [],
          "content_references": [],
          "gizmo_id": "g-p-67cc7f57b614819197a4fa9e793b0e47",
          "message_type": null,
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "7f3633f0-1bf7-43ca-8321-446baefc3ad3",
          "request_id": "92f64c3579656824-SEA",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "7f3633f0-1bf7-43ca-8321-446baefc3ad3",
      "children": []
    }
  },
  "moderation_results": [],
  "current_node": "ad2bc7f8-70b0-4713-b7dd-84d085216778",
  "plugin_ids": null,
  "conversation_id": "67faeed0-4fc4-800e-b937-d98bbec1a562",
  "conversation_template_id": "g-p-67cc7f57b614819197a4fa9e793b0e47",
  "gizmo_id": "g-p-67cc7f57b614819197a4fa9e793b0e47",
  "gizmo_type": "snorlax",
  "is_archived": false,
  "is_starred": null,
  "safe_urls": [
    "https://github.com/saadeghi/daisyui",
    "https://github.com/mvdnes/zip-rs",
    "https://www.sesame.com",
    "https://docs.rs/thiserror/latest/thiserror/",
    "https://github.com/tailwindlabs/tailwindcss",
    "https://docs.rs/anyhow/latest/anyhow/",
    "https://github.com/saadeghi/daisyui/tree/v5/docs/src/routes/components"
  ],
  "blocked_urls": [],
  "default_model_slug": "gpt-4o",
  "conversation_origin": null,
  "voice": null,
  "async_status": null,
  "disabled_tool_ids": [],
  "is_do_not_remember": null,
  "memory_scope": "global_enabled",
  "id": "67faeed0-4fc4-800e-b937-d98bbec1a562"
}
